// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    /// REGISTERS AND MUXx

    And(a=instruction[15], b=instruction[4], out=Dload);
    DRegister(in=ALUout, load=Dload, out=Dout);
   
    Not(in=instruction[15], out=Ainstruction);
    And(a=instruction[5], b=instruction[15], out=ALUtoA);
    Or(a=ALUtoA, b=Ainstruction, out=Aload);
    Mux16(a=instruction, b=ALUout, sel=ALUtoA, out=inA);
    
    ARegister(in=inA, load=Aload, out=Aout, out[0..14]=addressM); 

    // when a==0, computation includes A and D, when a==1 it includes M instead of A
    Mux16(a=Aout, b=inM, sel=instruction[12], out=inALU);

    And(a=instruction[15], b=instruction[3], out=writeM);


    /// JUMP logic 

    DMux8Way(in=true, sel=instruction[0..2], a=jnull, b=jgt, c=jeq, d=jge, e=jlt, f=jne, g=jle, h=jmp);

    Not(in=ng, out=notneg);
    Not(in=zr, out=notzero);

    And(a=notneg, b=notzero, out=jgt0);
    And(a=jgt0, b=jgt, out=jump0);      // JGT 

    And(a=zr, b=jeq, out=jump1);     // JEQ 

    And(a=notneg, b=jge, out=jump2);    // JGE 

    And(a=ng, b=jlt, out=jump3);        // JLT    

    And(a=jne, b=notzero, out=jump4);   // JNE

    Or(a=ng, b=zr, out=jle0); 
    And(a=jle0, b=jle, out=jump5);      // JLE

    Or8Way(in[0]=jump0, in[1]=jump1, in[2]=jump2, in[3]=jump3, in[4]=jump4, in[5]=jump5, in[6]=jmp, in[7]=false, out=jumpx);
    And(a=jumpx, b=instruction[15], out=jump); // jmp only if it's a c instruction (otherwise it overrides the incPC

    // if there's no jump, increment, PC is either incremented or set to jump value
    Not(in=jump, out=incPC);


    /// ALU and PC 

    ALU(x=inALU, y=Dout, zx=instruction[9], nx=instruction[8], zy=instruction[11], ny=instruction[10], f=instruction[7], no=instruction[6], out=ALUout, out=outM, zr=zr, ng=ng);

    PC(in=Aout, load=jump, inc=incPC, reset=reset, out[0..14]=pc);

}

